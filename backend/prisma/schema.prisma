generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  carts         Cart[]
  orders        Order[]
  quotations    Quotation[]
  refreshTokens RefreshToken[]

  @@map("users")
}

enum Role {
  USER
  ADMIN
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?   @db.Text
  slug        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(uuid())
  name        String
  description String   @db.Text
  price       Decimal  @db.Decimal(10, 2)
  stock       Int      @default(0)
  sku         String   @unique
  images      String   @db.Text // JSON array de URLs
  categoryId  String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  category       Category        @relation(fields: [categoryId], references: [id])
  cartItems      CartItem[]
  orderItems     OrderItem[]
  quotationItems QuotationItem[]

  @@index([categoryId])
  @@map("products")
}

model Cart {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user  User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items CartItem[]

  @@index([userId])
  @@map("carts")
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@index([productId])
  @@map("cart_items")
}

model Order {
  id            String      @id @default(uuid())
  orderNumber   String      @unique
  userId        String
  status        OrderStatus @default(PENDING)
  total         Decimal     @db.Decimal(10, 2)
  paymentMethod String?
  paymentStatus String?
  shippingAddress String    @db.Text // JSON
  billingAddress  String    @db.Text // JSON
  notes         String?     @db.Text
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  user  User        @relation(fields: [userId], references: [id])
  items OrderItem[]

  @@index([userId])
  @@index([orderNumber])
  @@map("orders")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model Quotation {
  id              String          @id @default(uuid())
  quotationNumber String          @unique
  userId          String
  status          QuotationStatus @default(PENDING)
  total           Decimal         @db.Decimal(10, 2)
  validUntil      DateTime
  notes           String?         @db.Text
  customerNotes   String?         @db.Text
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  user  User            @relation(fields: [userId], references: [id])
  items QuotationItem[]

  @@index([userId])
  @@index([quotationNumber])
  @@map("quotations")
}

enum QuotationStatus {
  PENDING
  APPROVED
  REJECTED
  EXPIRED
}

model QuotationItem {
  id          String   @id @default(uuid())
  quotationId String
  productId   String
  quantity    Int
  price       Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())

  quotation Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  product   Product   @relation(fields: [productId], references: [id])

  @@index([quotationId])
  @@index([productId])
  @@map("quotation_items")
}